#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_log.h"
#include "nvs_flash.h"
#include "sdkconfig.h"

// This is the component we are demonstrating
#include "net_manager.h"

static const char *TAG = "NET_EXAMPLE";

/**
 * @brief The central callback for all network events from net_manager.
 * This function is called from the context of the system event loop.
 */
void net_event_callback_handler(const net_manager_event_t *event)
{
    if (!event) {
        return;
    }

    switch (event->source) {
        case NET_EVENT_SOURCE_STA:
            ESP_LOGI(TAG, "Wi-Fi Station Event:");
            switch (event->status) {
                case NET_STATUS_CONNECTING:
                    ESP_LOGI(TAG, "  -> Connecting...");
                    break;
                case NET_STATUS_CONNECTED:
                    ESP_LOGI(TAG, "  -> Connected! IP: " IPSTR, IP2STR(&((esp_netif_ip_info_t*)event->data)->ip));
                    // Application logic can start here (e.g., connect to a server)
                    break;
                case NET_STATUS_DISCONNECTED:
                    ESP_LOGW(TAG, "  -> Disconnected.");
                    // Application logic should handle this (e.g., pause data sending)
                    break;
                default:
                    break;
            }
            break;

        case NET_EVENT_SOURCE_AP:
            ESP_LOGI(TAG, "Wi-Fi Access Point Event:");
             switch (event->status) {
                case NET_STATUS_STARTED:
                    ESP_LOGI(TAG, "  -> AP Started. SSID: ESP-Provision-AP, IP: " IPSTR, IP2STR(&((esp_netif_ip_info_t*)event->data)->ip));
                    break;
                case NET_STATUS_CLIENT_CONNECTED: {
                    wifi_event_ap_staconnected_t* client_info = (wifi_event_ap_staconnected_t*)event->data;
                    // ESP_LOGI(TAG, "  -> Client " MACSTR " connected, AID=%d", MAC2STR(client_info->mac), client_info->aid);
                    // ESP_LOGI(TAG, "  -> Client %02x:%02x:%02x:%02x:%02x:%02x connected, AID=%d", MAC2STR(client_info->mac), client_info->aid);
                    break;
                }
                case NET_STATUS_CLIENT_DISCONNECTED: {
                     wifi_event_ap_stadisconnected_t* client_info = (wifi_event_ap_stadisconnected_t*)event->data;
                    //  ESP_LOGI(TAG, "  -> Client " MACSTR " disconnected, AID=%d", MAC2STR(client_info->mac), client_info->aid);
                    // ESP_LOGI(TAG, "  -> Client %02x:%02x:%02x:%02x:%02x:%02x disconnected, AID=%d", MAC2STR(client_info->mac), client_info->aid);
                    break;
                }
                default:
                    break;
            }
            break;

        case NET_EVENT_SOURCE_ETHERNET:
            ESP_LOGI(TAG, "Ethernet Event:");
            switch (event->status) {
                case NET_STATUS_STARTED:
                    ESP_LOGI(TAG, "  -> Started.");
                    break;
                case NET_STATUS_CONNECTING:
                    ESP_LOGI(TAG, "  -> Link Up, waiting for IP...");
                    break;
                case NET_STATUS_CONNECTED:
                    ESP_LOGI(TAG, "  -> Connected! IP: " IPSTR, IP2STR(&((esp_netif_ip_info_t*)event->data)->ip));
                    break;
                case NET_STATUS_DISCONNECTED:
                    ESP_LOGW(TAG, "  -> Link Down.");
                    break;
                default:
                    break;
            }
            break;
    }
}

void app_main(void)
{
    // Initialize NVS
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
      ESP_ERROR_CHECK(nvs_flash_erase());
      ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK(ret);

    // --- 1. Initialize the Network Manager with our callback ---
    ESP_LOGI(TAG, "Initializing Net Manager...");
    ESP_ERROR_CHECK(net_manager_init(net_event_callback_handler));

    // --- 2. Prepare the configuration based on Kconfig ---
    net_manager_config_t config;
    memset(&config, 0, sizeof(config));

#if CONFIG_EXAMPLE_MODE_WIFI_STA
    ESP_LOGI(TAG, "--- Starting in Wi-Fi Station Mode ---");
    config.wifi_sta_enabled = true;
    strcpy(config.wifi_sta_config.ssid, CONFIG_EXAMPLE_WIFI_SSID);
    strcpy(config.wifi_sta_config.password, CONFIG_EXAMPLE_WIFI_PASSWORD);
    
    #if CONFIG_EXAMPLE_USE_STATIC_IP
    config.wifi_sta_config.use_static_ip = true;
    esp_netif_str_to_ip4(CONFIG_EXAMPLE_STATIC_IP_ADDR, &config.wifi_sta_config.ip_info.ip);
    esp_netif_str_to_ip4(CONFIG_EXAMPLE_STATIC_IP_NETMASK, &config.wifi_sta_config.ip_info.netmask);
    esp_netif_str_to_ip4(CONFIG_EXAMPLE_STATIC_IP_GATEWAY, &config.wifi_sta_config.ip_info.gw);
    if (strlen(CONFIG_EXAMPLE_STATIC_DNS_MAIN) > 0) {
        esp_netif_str_to_ip4(CONFIG_EXAMPLE_STATIC_DNS_MAIN, &config.wifi_sta_config.dns1);
    }
    if (strlen(CONFIG_EXAMPLE_STATIC_DNS_BACKUP) > 0) {
        esp_netif_str_to_ip4(CONFIG_EXAMPLE_STATIC_DNS_BACKUP, &config.wifi_sta_config.dns2);
    }
    #endif

#elif CONFIG_EXAMPLE_MODE_ETHERNET
    ESP_LOGI(TAG, "--- Starting in Ethernet Mode ---");
    config.ethernet_enabled = true;

    #if CONFIG_EXAMPLE_USE_STATIC_IP
    config.ethernet_config.use_static_ip = true;
    esp_netif_str_to_ip4(CONFIG_EXAMPLE_STATIC_IP_ADDR, &config.ethernet_config.ip_info.ip);
    esp_netif_str_to_ip4(CONFIG_EXAMPLE_STATIC_IP_NETMASK, &config.ethernet_config.ip_info.netmask);
    esp_netif_str_to_ip4(CONFIG_EXAMPLE_STATIC_IP_GATEWAY, &config.ethernet_config.ip_info.gw);
    if (strlen(CONFIG_EXAMPLE_STATIC_DNS_MAIN) > 0) {
        esp_netif_str_to_ip4(CONFIG_EXAMPLE_STATIC_DNS_MAIN, &config.ethernet_config.dns1);
    }
    if (strlen(CONFIG_EXAMPLE_STATIC_DNS_BACKUP) > 0) {
        esp_netif_str_to_ip4(CONFIG_EXAMPLE_STATIC_DNS_BACKUP, &config.ethernet_config.dns2);
    }
    #endif

#elif CONFIG_EXAMPLE_MODE_AP_STA
    ESP_LOGI(TAG, "--- Starting in AP+STA Provisioning Mode ---");
    // AP Configuration
    config.wifi_ap_enabled = true;
    strcpy(config.wifi_ap_config.ssid, "ESP-Provision-AP");
    strcpy(config.wifi_ap_config.password, "12345678");
    config.wifi_ap_config.max_connections = 4;

    // STA Configuration
    config.wifi_sta_enabled = true;
    strcpy(config.wifi_sta_config.ssid, CONFIG_EXAMPLE_WIFI_SSID);
    strcpy(config.wifi_sta_config.password, CONFIG_EXAMPLE_WIFI_PASSWORD);

#endif

    // --- 3. Start the Network Manager with the prepared configuration ---
    ESP_ERROR_CHECK(net_manager_start(&config));

    // --- Main application logic goes here ---
    // The application can now run other tasks. Network state changes will
    // be handled asynchronously by the callback function.
    ESP_LOGI(TAG, "Net Manager started. Application is running.");

    int uptime_seconds = 0;
    while(1) {
        vTaskDelay(pdMS_TO_TICKS(10000));
        uptime_seconds += 10;
        ESP_LOGI(TAG, "Uptime: %d seconds. Wi-Fi STA connected: %s, Ethernet connected: %s", 
                 uptime_seconds, 
                 net_manager_is_sta_connected() ? "Yes" : "No",
                 net_manager_is_eth_connected() ? "Yes" : "No");
    }
}